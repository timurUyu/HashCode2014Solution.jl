var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HashCode2014Solution","category":"page"},{"location":"#HashCode2014Solution","page":"Home","title":"HashCode2014Solution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HashCode2014Solution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HashCode2014Solution]","category":"page"},{"location":"#HashCode2014Solution.RouteGrid","page":"Home","title":"HashCode2014Solution.RouteGrid","text":"RouteGrid\n\nTransform a city into a graph where each junction is a node, and the streets are edges.\n\nFields\n\nneighbors::Vector{SVector{RouteGridNode}}: for each junction, the list of street-junctions that can be reached from it.\npaths::Vector{Vector{SVector{RouteGridNode}}}: all paths of length n for each junction\npath_length::Int: the length of the paths to consider\n\n\n\n\n\n","category":"type"},{"location":"#HashCode2014Solution.RouteGridNode","page":"Home","title":"HashCode2014Solution.RouteGridNode","text":"RouteGridNode\n\nGroup a junction and a street that leads to it together.\n\nFields\n\nstreet::Int: a street in the city\njunction::Int: a junction that can be reached from the street\ndistance::Int: the length of the street\n\n\n\n\n\n","category":"type"},{"location":"#HashCode2014Solution.ComputeUpperBound-Tuple{HashCode2014.City, Int64, RouteGrid}","page":"Home","title":"HashCode2014Solution.ComputeUpperBound","text":"ComputeUpperBound(city, duration_limit)\n\nAlgorithm to compute upper bound on distance. Compares velocity of each street and constructs 8 separate paths for each car in a \"drag race\" style journey. This approach relaxes the constraint on connectivity of the streets.\n\nFields\n\n'city::City': a street in the city\n'duration_limit::Int64': the total time limit imposed on cars traversing streets\n\n\n\n\n\n","category":"method"},{"location":"#HashCode2014Solution.change_duration-Tuple{HashCode2014.City, Any}","page":"Home","title":"HashCode2014Solution.change_duration","text":"change_duration(city, total_duration)\n\nCreate a new City with a different total_duration and everything else equal.\n\n\n\n\n\n","category":"method"},{"location":"#HashCode2014Solution.create_grid","page":"Home","title":"HashCode2014Solution.create_grid","text":"create_grid(city::City, n::Int)\n\nCreate a RouteGrid from a City, and compute all paths of length n for each junction.\n\nArguments\n\ncity::City: the city to transform\nn::Int: the length of the path to consider\n\n\n\n\n\n","category":"function"},{"location":"#HashCode2014Solution.generate_all_paths-Tuple{Vector{Vector{RouteGridNode}}}","page":"Home","title":"HashCode2014Solution.generate_all_paths","text":"generate_all_paths(paths, rg::RouteGrid; n::Int=2)\n\nGenerate all paths of length n for each junction in rg.\n\nArguments\n\npaths::Vector{Vector{Int}}: a Vector to store the paths in\nneighbors::Vector{Vector{RouteGridNode}}: for each junction, the list of street-junctions that can be reached from it.\nn::Int=2: the length of the path to consider\n\n\n\n\n\n","category":"method"},{"location":"#HashCode2014Solution.get_best_neighbor-Tuple{Vector{Int64}, Int64, RouteGrid, Int64}","page":"Home","title":"HashCode2014Solution.get_best_neighbor","text":"get_best_neighbor_fast!(current_path::Vector{Int}, starting_junction::Int, rg::RouteGrid, current_idx::Int)\nget_best_neighbor(starting_junction::Int, rg::RouteGrid)\n\nGet the neighbor of a junction that leads to the longest path. Path length is specified by rg.path_length. A path taken so far can also be specified.\n\nArguments\n\ncurrent_path::Vector{Int}: the path that has been taken so far, padded with zeros\nstarting_junction::Int: the junction from which to start\nrg::RouteGrid: a city, in the form of a RouteGrid\ncurrent_idx::Int: the index of the junction in current_path that is being considered the starting junction\n\n\n\n\n\n","category":"method"},{"location":"#HashCode2014Solution.get_length_n_paths-Tuple{Int64, Vector{Vector{RouteGridNode}}}","page":"Home","title":"HashCode2014Solution.get_length_n_paths","text":"get_length_n_paths(junction::Int, rg::RouteGrid; n::Int=1)\n\nGet all paths of length n that start at starting_junction.\n\nArguments\n\nstarting_junction::Int: the junction from which to start\nneighbors::Vector{Vector{RouteGridNode}}: for each junction, the list of street-junctions that can be reached from it.\nn::Int=1: the length of the path to consider\n\n\n\n\n\n","category":"method"},{"location":"#HashCode2014Solution.greedy_path!-Tuple{Vector{Int64}, Int64, RouteGrid, Int64, Int64}","page":"Home","title":"HashCode2014Solution.greedy_path!","text":"greedy_path(rg::RouteGrid, starting_junction::Int, total_duration::Int; n::Int=1)\n\nFind a path through the city by always choosing the best neighbor to visit next. The best neighbor is the one that leads to the longest path. Path length is specified by rg.path_length.\n\nArguments\n\npath::Vector{Int}: the path to build upon, padded with zeros to be the same length as rg.neighbors\ncurrent_idx::Int: the index of the junction in path that is being considered the starting junction\nrg::RouteGrid: a city, in the form of a RouteGrid\nstarting_junction::Int: the junction from which to start\ntotal_duration::Int: the total duration of the path\n\n\n\n\n\n","category":"method"},{"location":"#HashCode2014Solution.greedy_path-Tuple{RouteGrid, Int64, Int64}","page":"Home","title":"HashCode2014Solution.greedy_path","text":"greedy_path(rg::RouteGrid, starting_junction::Int, total_duration::Int)\n\nFind a path through the city by always choosing the best neighbor to visit next. The best neighbor is the one that leads to the longest path. Path length is specified by rg.path_length.\n\nArguments\n\nrg::RouteGrid: a city, in the form of a RouteGrid\nstarting_junction::Int: the junction from which to start\ntotal_duration::Int: the total duration of the path\n\n\n\n\n\n","category":"method"},{"location":"#HashCode2014Solution.path_length-Tuple{AbstractVector{Int64}, RouteGrid}","page":"Home","title":"HashCode2014Solution.path_length","text":"path_length(path::AbstractVector{Int}, rg::RouteGrid)\n\nCompute the length of a path in a RouteGrid.\n\nArguments\n\npath::AbstractVector{Int}: a path made up of the junctions that are visited\nrg::RouteGrid: a city, in the form of a RouteGrid\n\n\n\n\n\n","category":"method"},{"location":"#HashCode2014Solution.unique_random_walk-Tuple{Random.AbstractRNG, HashCode2014.City, RouteGrid}","page":"Home","title":"HashCode2014Solution.unique_random_walk","text":"unique_random_walk(rng, city, rg)\nunique_random_walk(city, rg)\n\nModified version of random_walk() from HashCode2014. Uses a custom type, RouteGrid, to determine candidate streets and weights against streets which have already been traversed. Threading over the random walks of each car improves performance significantly.\n\nArguments\n\nrng::AbstractRNG: random number generator\ncity::City: city of junctions connected by streets\nrg::RouteGrid: graph representing the city\n\n\n\n\n\n","category":"method"}]
}
